title: Automate GitHub for more than CI/CD
---
categories:
community
cc-search
open-source
---
author: zackkrida
---
pub_date: 2020-08-26
---
body:

> *Get started using GitHub bots and actions for community management and repositiory health.*


In late 2018, in the midst of being acquired by Microsoft, GitHub [launched Github Actions](https://github.blog/2018-10-16-future-of-software/) into public beta, allowing users to run code on the popular development platform for the first time. With a straightforward `.yml` configuration syntax and the power of Microsoft's Azure cloud, GitHub actions quickly rose to compete with existing Continuous Integration (CI) and Continuous Deployment (CD) platforms like **Circle CI** and **Travis CI**. GitHub actions made it easier than ever for developers to test and deploy software in the cloud, but from the beginning GitHub had bigger plans for the service.

In a [2018 TechCrunch interview](https://techcrunch.com/2018/10/16/github-launches-actions-its-workflow-automation-tool/), GitHub's then head of platform adknowledged the usefullness of actions for more than CI/CD. "I see CI/CD as one narrow use case of actions. It’s so, so much more,” Lambert stressed. “And I think it’s going to revolutionize DevOps because people are now going to build best in breed deployment workflows for specific applications and frameworks, and those become the de facto standard shared on GitHub. […] It’s going to do everything we did for open source again for the DevOps space and for all those different parts of that workflow ecosystem."

At Creative Commons, we use Github Actions and Bots on many of [our open-source projects](https://github.com/creativecommons?type=source) for more than CI/CD—to manage our [community team](http://localhost:5000/community/community-team/); to automate repository health; and to make tedious but frequent tasks automatic. The following examples are just a small snapshot of our existing and in-progress automations.

## Example automations

<!-- no toc -->
- [Automatic release note generation](#automatic-release-note-generation)
- [Repository Normalization](#repository-normalization)
- [Automatic Dependency Updates](#automatic-dependency-updates)

### Automatic release note generation

Our frontend Vue.js application for CC Search gets released weekly, and is subject to constant pull requests from myself, one-time volunteers making their first open source contribution, and long-term, dedicated community members who frequently contribute. It's important for us to highlight *all* of these contributions in our release notes, regardless of size or scope. Additionally, we find it useful to group changes into categories, so our users have a clear sense of what kinds of updates we've made.

<div style="text-align: center;">
  <figure class="margin-bottom-large">
    <img src="release-notes-screenshot.png" alt="GitHub screenshot of release notes for CC Search" />
    <figcaption>
      <em>
        An example of CC Search release notes generated by the <a href="https://github.com/marketplace/actions/release-drafter">Release Drafter</a> GitHub Action.
      </em>
    </figcaption>
  </figure>
</div>

The quality of these release notes made them quite tedious to generate manually. With the [release drafter action](https://github.com/marketplace/actions/release-drafter), we're able to automatically update a draft release note on every pull request to CC Search. The action lets us configure the line added for each pull request with some basic templating which includes variables for the pr number, title, and author (among others):

```yaml
change-template: '- $TITLE: #$NUMBER by @$AUTHOR'
```

<br />We can also map GitHub labels on our pull requests to the sections of our generated release notes, like so:

```yaml
categories:
  - title: 'New Features'
    label: 'feature'
  - title: 'Bug Fixes'
    label:
      - 'bug'
      - 'critical'
```

The resulting release notes require no manual editing at release time, and has saved us hours over time and allows our developers to focus on DevOps work instead of copywriting on release days. We also never miss a contribution or expression of gratitude to one of our contributors. You can read the [latest CC Search release notes](https://github.com/creativecommons/cccatalog-frontend/releases/latest) or [see our full release-drafter.yml file here](https://github.com/creativecommons/cccatalog-frontend/blob/develop/.github/release-drafter.yml).

### Repository Normalization

Within a private repository of internal helper scripts, the CC technical team has a number of Github Actions which trigger python scripts to keep configuration standardized across our repositories. One such script ensures that we use a standard set of GitHub labels across all of our projects. This consistency helps us do things like direct users to [open issues in need of assistance](https://github.com/search?q=org%3Acreativecommons+label%3A%22help+wanted%22+state%3Aopen&type=Issues) across the organization, or issues [good for first-time open source contributors](https://github.com/search?q=org%3Acreativecommons+label%3A%22good+first+issue%22+state%3Aopen&type=Issues). With GitHub actions, its easy to set up scheduled tasks with only a few lines of human-readable configuration. Here's the gist of running a python script daily, for example:

```yaml
name: Example scheduled python action
on:
  schedule:
  - cron: '0 0 * * *'
  push:
    branches:
      - master
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.7
      uses: actions/setup-python@v1
      with:
        python-version: 3.7
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install pipenv
        pipenv install
    - name: Export token to env and run our script
      run: |
        pipenv run python our-script.py
      env:
        ADMIN_GITHUB_TOKEN: ${{ secrets.ADMIN_GITHUB_TOKEN }}
```

Internally and publically, we use [GitHub Projects](https://github.com/orgs/creativecommons/projects) to manage our bi-weekly sprints and backlogs. The [GitHub Project Bot](https://github.com/subhamX/github-project-bot) action allows to add pull requests to our progress columns. Here's an example step in such a job:

```yaml
- name: Handle cccatalog-frontend Repo
  uses: subhamX/github-project-bot@v1.0.0
  with:
    ACCESS_TOKEN: ${{ secrets.ADMIN_GITHUB_TOKEN }}
    COLUMN_NAME: "In Progress (Community)"
    PROJECT_URL: https://github.com/orgs/creativecommons/projects/7
    REPO_URL: https://github.com/creativecommons/cccatalog-frontend
```

We have additional scripts that sync our community team members across our open source website and GitHub, and several others that do even more of this cross-platform synchronization work. All of these scripts relive significant burden off of our engineering manager and open source community coordinator.

### Automatic Depedency Updates

[tbd]

## conslusion

- github actions rule
- finedmore here
- share your ideas with us
